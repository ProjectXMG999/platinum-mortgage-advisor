"""
Platinum Mortgage Advisor - G≈Ç√≥wny modu≈Ç aplikacji
System wyszukiwania produkt√≥w hipotecznych oparty na AI
"""
import sys
from pathlib import Path

# Dodaj ≈õcie≈ºkƒô do modu≈Çu config
sys.path.insert(0, str(Path(__file__).parent))

import config
from query_engine import QueryEngine


def print_header():
    """Wy≈õwietla nag≈Ç√≥wek aplikacji"""
    print("\n" + "="*80)
    print(" "*20 + "PLATINUM MORTGAGE ADVISOR")
    print(" "*15 + "System wyszukiwania produkt√≥w hipotecznych")
    print("="*80)


def print_menu():
    """Wy≈õwietla menu aplikacji"""
    print("\n" + "-"*80)
    print("OPCJE:")
    print("  1. Zadaj zapytanie")
    print("  2. Zobacz przyk≈Çadowe zapytania")
    print("  3. Lista dostƒôpnych bank√≥w")
    print("  4. Wyj≈õcie")
    print("-"*80)


def show_example_queries():
    """Wy≈õwietla przyk≈Çadowe zapytania"""
    examples = [
        "finansowanie wk≈Çadu w≈Çasnego dla osoby powy≈ºej 60 lat",
        "Finansowanie zakupu udzia≈Ç√≥w we wsp√≥lnocie (jak mieszkanie w kamienicy bez ksiƒôgi wieczystej)",
        "Kredyt bez wk≈Çadu w≈Çasnego",
        "Kredyt dla osoby z ma≈Çym sta≈ºem pracy",
        "Kredyt dla osoby z niskim dochodem na osobƒô w rodzinie",
        "Kredyt zabezpieczony innƒÖ nieruchomo≈õciƒÖ"
    ]
    
    print("\n" + "="*80)
    print("PRZYK≈ÅADOWE ZAPYTANIA:")
    print("="*80)
    for i, example in enumerate(examples, 1):
        print(f"{i}. {example}")
    print("="*80)


def run_interactive_mode(engine: QueryEngine):
    """
    Uruchamia aplikacjƒô w trybie interaktywnym
    
    Args:
        engine: Instancja QueryEngine
    """
    while True:
        print_menu()
        choice = input("\nWybierz opcjƒô (1-4): ").strip()
        
        if choice == '1':
            # Zadaj zapytanie
            print("\n" + "="*80)
            query = input("Wpisz swoje zapytanie: ").strip()
            
            if not query:
                print("‚ùå Zapytanie nie mo≈ºe byƒá puste!")
                continue
            
            try:
                response = engine.process_query(query)
                print("\n" + "="*80)
                print("üìä WYNIKI WYSZUKIWANIA:")
                print("="*80)
                print(response)
                print("="*80)
            except Exception as e:
                print(f"\n‚ùå B≈ÇƒÖd podczas przetwarzania zapytania: {str(e)}")
        
        elif choice == '2':
            # Poka≈º przyk≈Çady
            show_example_queries()
        
        elif choice == '3':
            # Lista bank√≥w
            banks = engine.get_available_banks()
            print("\n" + "="*80)
            print(f"DOSTƒòPNE BANKI ({len(banks)}):")
            print("="*80)
            for i, bank in enumerate(banks, 1):
                print(f"{i}. {bank}")
            print("="*80)
        
        elif choice == '4':
            # Wyj≈õcie
            print("\nüëã Do widzenia!")
            break
        
        else:
            print("\n‚ùå Nieprawid≈Çowa opcja! Wybierz 1-4.")


def main():
    """G≈Ç√≥wna funkcja aplikacji"""
    print_header()
    
    try:
        # Inicjalizuj silnik zapyta≈Ñ
        engine = QueryEngine(config.KNOWLEDGE_BASE_PATH)
        
        # Uruchom tryb interaktywny
        run_interactive_mode(engine)
    
    except FileNotFoundError as e:
        print(f"\n‚ùå B≈ÇƒÖd: {str(e)}")
        print("Upewnij siƒô, ≈ºe plik z bazƒÖ wiedzy istnieje w: data/processed/knowledge_base.json")
        sys.exit(1)
    
    except KeyboardInterrupt:
        print("\n\nüëã Przerwano przez u≈ºytkownika. Do widzenia!")
        sys.exit(0)
    
    except Exception as e:
        print(f"\n‚ùå Nieoczekiwany b≈ÇƒÖd: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()
